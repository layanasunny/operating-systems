#include <stdio.h>

void calculateTimes(int burst_time[], int n, int quantum) {
int waiting_time[n], turn_around_time[n];
int remaining_time[n];
int total_waiting_time = 0, total_turnaround_time = 0;
int time = 0; // Current time
// Initialize remaining time with burst times
for (int i = 0; i &lt; n; i++) {
remaining_time[i] = burst_time[i];
}
int remaining_processes = n;
// Gantt Chart printing
printf(&quot;\nGantt Chart:\n&quot;);
printf(&quot;----------------------
printf(&quot;|&quot;);
// Round Robin scheduling
while (remaining_processes &gt; 0) {
for (int i = 0; i &lt; n; i++) {
if (remaining_time[i] &gt; 0) {
printf(&quot; P%d |&quot;, i + 1); // Print process in Gantt chart
if (remaining_time[i] &gt; quantum) {
// Process gets fully executed in this time quantum
time += quantum;
remaining_time[i] -= quantum;
} else {
// Process completes execution
time += remaining_time[i];
waiting_time[i] = time - burst_time[i];
turn_around_time[i] = waiting_time[i] + burst_time[i];
remaining_time[i] = 0; // Process is complete
remaining_processes--; // One less process to handle
}
}
}
}
printf(&quot;\n--------------------

// Printing process details
printf(&quot;\nProcess ID\tBurst Time\tWaiting Time\tTurnaround Time\n&quot;);
for (int i = 0; i &lt; n; i++) {
total_waiting_time += waiting_time[i];
total_turnaround_time += turn_around_time[i];
printf(&quot;%d\t\t%d\t\t%d\t\t%d\
}
printf(&quot;\nAverage Waiting Time: %.2f&quot;, (float)total_waiting_time / n);
printf(&quot;\nAverage Turnaround Time: %.2f&quot;, (float)total_turnaround_time / n);
}
int main() {
int n, quantum;
printf(&quot;Enter the number of processes: &quot;);
scanf(&quot;%d&quot;, &amp;n);
int burst_time[n];
for (int i = 0; i &lt; n; i++) {
printf(&quot;\nEnter Burst Time for Process %d: &quot;, i + 1);
scanf(&quot;%d&quot;, &amp;burst_time[i]);
}
printf(&quot;\nEnter Time Quantum: &quot;);
scanf(&quot;%d&quot;, &amp;quantum);
calculateTimes(burst_time, n, quantum);
return 0;
}
